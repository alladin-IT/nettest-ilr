/*******************************************************************************
 * Copyright 2016-2017 alladin-IT GmbH
 * Copyright 2016 SPECURE GmbH
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/

package at.alladin.nettest.server.control.web.api.v1;

import java.util.List;
import java.util.Locale;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.google.gson.JsonObject;
import at.alladin.nettest.server.control.exception.measurement.MeasurementNotFoundException;
import at.alladin.nettest.server.control.service.MeasurementService;
import at.alladin.nettest.server.control.service.QosMeasurementService;
import at.alladin.nettest.shared.model.Measurement;
import at.alladin.nettest.shared.model.MeasurementQos;
import at.alladin.nettest.shared.model.MeasurementQosResult;
import at.alladin.nettest.shared.model.response.QosMeasurementResultResponse;

import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import springfox.documentation.annotations.ApiIgnore;

/**
 * 
 * @author alladin-IT GmbH (bp@alladin.at)
 *
 */
// TODO: Move this resource to the statistics server!
@RestController
@RequestMapping("/api/v1/opentests/qos")
public class TemporaryOpenTestQosResource {
	
	@SuppressWarnings("unused")
	private final Logger logger = LoggerFactory.getLogger(TemporaryOpenTestQosResource.class);
	
	/**
	 * 
	 */
	@Inject
	private MeasurementService measurementService;
	
	/**
	 * 
	 */
	@Inject
	private QosMeasurementService qosMeasurementService;
	
	/**
	 * 
	 * @param uuid
	 * @param locale
	 * @return
	 */
	@ApiImplicitParams({
	    @ApiImplicitParam(name = "lang", dataType = "string", paramType = "query", value = "Accept-Language override") // Locale
	})
	
	@RequestMapping(value = "/O{openTestUuid}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<QosMeasurementResultResponse> getQosMeasurement(@PathVariable String openTestUuid, @ApiIgnore Locale locale) {
		final Measurement measurement = measurementService.findMeasurementByOpenTestUuid(openTestUuid); // TODO: checks
		final MeasurementQos measurementQos = measurement.getQos(); // TODO: checks
		
		if (measurementQos == null || !"FINISHED".equals(measurementQos.getStatus())) { // TODO: create an enum for qos status...
			throw new MeasurementNotFoundException();
		}
		
		final List<MeasurementQosResult> measurementQosResultList = measurementQos.getResults();
		
		// workarounds for old<-->new model, TODO: needs refactoring
		final List<JsonObject> resultList = measurementQosResultList.parallelStream().map(result -> {
			final JsonObject jsonObject = result.getResult();
			
			jsonObject.addProperty("test_type", result.getType().getValue());
			jsonObject.addProperty("qos_test_uid", result.getObjectiveId());
			
			return jsonObject;
		}).collect(Collectors.toList());
		
		final QosMeasurementResultResponse qosMeasurementResultResponse = qosMeasurementService.processQosMeasurements(locale, measurementQos, resultList);
		
		return new ResponseEntity<>(qosMeasurementResultResponse, HttpStatus.OK);
	}
}
